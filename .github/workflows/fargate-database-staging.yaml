name: MYSQL database

on: 
  workflow_call:
    inputs:
      AWS_ACCOUNT_ID:
        default: ''
        description: 'The AWS Account number'
        required: true
        type: string
      AWS_REGION:
        default: 'us-west-2'
        description: 'The AWS Region to deploy to'
        required: false
        type: string
      BUSINESS_UNIT:
        default: 'pmc'
        description: 'The business unit'
        required: false
        type: string
      ENVIRONMENT:
        default: ''
        description: 'The environment name'
        required: true
        type: string
      IAM_ROLE_NAME:
        default: ''
        description: 'The AWS IAM Role to assume'
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  database:
    name: Create-database
    runs-on: self-hosted
    timeout-minutes: 90
    if: false
    
    steps: 
      - name: Assume Devops-Admin IAM role Staging
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/${{ inputs.IAM_ROLE_NAME }}
          role-duration-seconds: 1200
          role-session-name: ${{ inputs.BUSINESS_UNIT }}-${{ inputs.ENVIRONMENT }}
          role-skip-session-tagging: true

      - name: Update Database Password Staging
        run: |
          cd ${GITHUB_WORKSPACE}/terraform
          # Set rds master password
          echo "Setting rds master password"
          mkdir rds
          cd rds
          cat <<EOF >  backend.tf
          terraform {
            backend "s3" {}
          }
          EOF
          terraform init \
          -backend-config="bucket=${business_unit}-${bucket_env}-tf-states-${aws_region}" \
          -backend-config="key=${environment}-${business_unit}/aws-main.state" \
          -backend-config="region=${aws_region}" \
          -input=false
          function jkAssumeAWSRole() {
            if [[ -z "${BUSINESSUNIT}" ]]
              then echo -e "You need to export BUSINESSUNIT={sk|pmc}" && exit 1
            fi
            if [[ -z "${ENVIRONMENT}" ]]
              then echo -e "You need to export ENVIRONMENT={stg|prod}" && exit 1
            fi
            # set account number so that role can be assumed
            if [[ "${ENVIRONMENT}-${BUSINESSUNIT}" == "stg-pmc" ]]; then
              export account_number="925863785861"
            elif [[ "${ENVIRONMENT}-${BUSINESSUNIT}" == "prod-pmc" ]]; then
              export account_number="822851984708"
            elif [[ "${ENVIRONMENT}-${BUSINESSUNIT}" == "prod-sk" ]]; then
              export account_number="464371638975"
            elif [[ "${ENVIRONMENT}-${BUSINESSUNIT}" == "stg-sk" ]]; then
              export account_number="960776479514"
            fi
            # assume role
            assume_role=$(aws sts assume-role --role-arn arn:aws:iam::${account_number}:role/tf-${BUSINESSUNIT}-${ENVIRONMENT}-jenkins-role \
            --duration-seconds 43200 --role-session-name ${BUSINESSUNIT}-${ENVIRONMENT})
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SESSION_TOKEN
            export AWS_ACCESS_KEY_ID=$(echo $assume_role | jq -r '.Credentials.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(echo $assume_role | jq -r '.Credentials.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(echo $assume_role | jq -r '.Credentials.SessionToken')
            if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]
              then echo -e "You need to export AWS_SECRET_ACCESS_KEY" && exit 1
            fi
            if [[ -z "${AWS_ACCESS_KEY_ID}" ]]
              then echo -e "You need to export AWS_ACCESS_KEY_ID" && exit 1
            fi
            export YEAR=$(date +%Y)
            export MONTH=$(date +%b)
            export DAY=$(date +%d)
          }
          remove_rds_directory() {
            echo "Removing rds directory"
            cd ..
            rm -rf rds
          }
          password_set() {
            echo "Determining if password is set"
            db_secret_name="tf-${business_unit}-${environment}-${service_name}-secret"
            echo "db_secret_name=$db_secret_name" >> $GITHUB_ENV
            secret_exists=$(aws secretsmanager list-secrets --region ${aws_region} | grep ${db_secret_name} || true)
            if [[ -z "${secret_exists}" ]]; then
              echo "secret doesn't exist yet, proceeding to create database password and set password in manifest"
              create_password
              set_password_manifest $1
              echo "Setting var: FIRST_CREATION as this is the first time this secret/database is being created"
              echo FIRST_CREATION="true" >> $GITHUB_ENV
            else
              echo "secret exists, checking if secret has been accessed"
              secret_accessed=$(aws secretsmanager describe-secret --secret-id ${db_secret_name} --region ${aws_region} | jq -r '.LastAccessedDate')
              if [[ -z "${secret_accessed}" || "${secret_accessed}" == "null" ]]; then
                echo "secret hasn't been accessed yet, proceeding to not check if password is set and immediately setting password"
                create_password
                initial_upload_password
                set_password_manifest $1
              else
                echo "secret exists, and has been accessed checking if password is set in secrets manager"
                database_password=$(aws secretsmanager get-secret-value --secret-id ${db_secret_name} --output text --region ${aws_region} --query 'SecretString' | jq -r '.password')
                if [[ -z "${database_password}" || "${database_password}" == "null" ]]; then
                  echo "password isn't set in secrets manager, proceeding to create database password, upload to secrets manager and set password in manifest"
                  create_password
                  upload_password
                  set_password_manifest $1
                else
                  echo "password is set in secrets manager, proceeding to set password in manifest"
                  set_password_manifest $1
                fi
              fi
            fi
          }
          create_password() {
            database_password=$(date +%s | sha256sum | base64 | head -c 16 ; echo)
            echo "database_password=$database_password" >> $GITHUB_ENV
          }
          initial_upload_password() {
            NEW_SECRET_VALUE="{ \"password\": \"${database_password}\" }"
            aws secretsmanager put-secret-value --secret-id ${db_secret_name} --region ${aws_region} --secret-string "${NEW_SECRET_VALUE}"
          }
          upload_password() {
            EXISTING_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id ${db_secret_name} --output text --region ${aws_region} --query 'SecretString')
            NEW_SECRET_VALUE=$(echo ${EXISTING_SECRET_VALUE} | jq ". + { \"password\": \"${database_password}\" }")
            aws secretsmanager put-secret-value --secret-id ${db_secret_name} --region ${aws_region} --secret-string "${NEW_SECRET_VALUE}"
          }
          set_password_manifest() {
            echo "database_password = \"$database_password\"" >> "${GITHUB_WORKSPACE}/terraform/$1.tfvars"
            terraform fmt "${GITHUB_WORKSPACE}/terraform/$1.tfvars"
          }
          cp ../providers.tf ../providers.tf.bak
          mysql=$(cat ../providers.tf | grep "provider \"mysql\"" || :)
          postgresql=$(cat ../providers.tf | grep "provider \"postgresql\"" || :)
          export BUSINESSUNIT=$business_unit
          export ENVIRONMENT=$environment
          jkAssumeAWSRole
          if [[ -z "${mysql}" && -z "${postgresql}" ]]; then
            echo "mysql and postgresql are not set, continuing..."
            remove_rds_directory
          elif [[ -n "${postgresql}" ]]; then
            echo "setting postgresql RDS password"
            secret_name="tf-${business_unit}-${environment}-aurora-ms-postgres-secret"
            password=$(aws secretsmanager get-secret-value --secret-id ${secret_name} --output text --region ${aws_region} --query 'SecretString' | jq -r '.password')
            sed -i -e "s|\"\"|\"$password\"|g" ../providers.tf
            remove_rds_directory
            password_set development
          elif [[ -n "${mysql}" ]]; then
            echo "setting mysql RDS password"
            secret_name="tf-${business_unit}-${environment}-aurora-ms-mysql-secret"
            password=$(aws secretsmanager get-secret-value --secret-id ${secret_name} --output text --region ${aws_region} --query 'SecretString' | jq -r '.password')
            sed -i -e "s|\"\"|\"$password\"|g" ../providers.tf
            remove_rds_directory
            password_set development
          fi

